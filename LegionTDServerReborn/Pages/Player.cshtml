@page "{playerId:long}"
@using LegionTDServerReborn.Models
@using LegionTDServerReborn.Extensions
@using LegionTDServerReborn.Helpers
@using Microsoft.AspNetCore.Html
@model PlayerModel
@{
    if (Model.PlayerId != -1) {
        ViewData["Title"] = @Model.Player.PersonaName;
    } else {
        ViewData["Title"] = "Player not found";
    }
}

@if (Model.PlayerId != -1) {
    <div class='row'>
        <div class='row match-header '>
            <div class='col-lg-4 col-md-3 match-title'>
                <span class='match-title'><img src='@Model.Player.Avatar'> @ViewData["Title"]</span>
            </div>
            <div class='col-lg-8 col-md-9 col-sm-12 col-xs-12' style="">
                <div id='match_info' style="">
                    @{
                        var dictionary = new Dictionary<string, string>();
                        try {
                            dictionary["Rank"] = Model.Player.Ranking.Position.ToString();
                        } catch (Exception) {
                            dictionary["Rank"] = "TBD";
                        }
                        dictionary["Rating"] = Model.Player.Rating.ToString();
                        dictionary["Last Game"] = Model.Player.Matches.Max(m => m.Match.Date).ToRelativeText();
                        dictionary["Record"] = $"<span class='radiant'>{Model.Player.WonGames}</span> - <span class='dire'>{@Model.Player.LostGames}</span>";
                        dictionary["Win Rate"] = $"{Model.Player.WinRate * 100:00.00}%";
                        <div class='row'>
                            @foreach (var pair in dictionary) {
                                <div class='col-lg-2 col-md-2 col-sm-2 col-xs-6 match-info'>
                                    <p class='match-info-title text-center'>@pair.Key</p>
                                    <p class='match-info-value text-center'>@Html.Raw(pair.Value)</p>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row plt-wrapper">
        <div id="player_rating_plot"></div>
    </div>

    <h3>Matches</h3>

    @await Html.PartialAsync("_PartialSiteViewNavigator", Model)
    <div class='table-responsive'>
        <table class="table table-responsive table-hover table-striped">
            <thead>
                <tr>
                    <th>
                        Builder
                    </th>
                    <th>
                        Date
                    </th>
                    <th>
                        Duration
                    </th>
                    <th>
                        Result
                    </th>
                    <th>
                        Last Wave
                    </th>
                    <th>
                        Rating
                    </th>
                </tr>
            </thead>
            <tbody id="match_table_body">
                @{
                    Func<PlayerMatchData, IHtmlContent> printMatch = 
                        @<tr class='clickable-row' data-href='/Match/@item.MatchId'>
                            <td>@await Html.PartialAsync("_PartialFractionIcon", item.FractionName)</td>
                            <td>@item.Match.GetFormattedDate()</td>
                            <td>@item.Match.GetFormattedTime()</td>
                            <td>
                                @if (@item.Abandoned) {
                                    <span class='dire'>Abandoned</span>
                                } else {
                                    @if (@item.Won) {
                                        <span class='radiant'>Won Game</span>
                                    } else {
                                        <span class='dire'>Lost Game</span>
                                    }
                                }
                            </td>
                            <td>@item.Match.LastWave</td>
                            <td>@Html.FormatRatingChange(item)</td>
                        </tr>;
                    foreach(var match in @Model.Player.Matches.OrderByDescending(m => m.MatchId).Skip((Model.Site - 1) * Model.EntriesPerSite).Take(Model.EntriesPerSite)) {
                        @printMatch(match)
                    }
                }
            </tbody>
        </table>
    </div>
    @await Html.PartialAsync("_PartialSiteViewNavigator", Model)
} else {
    <h2>Player not found.</h2>
}


@section scripts {
    <script>
        $(function () {
            $(".clickable-row").click(function() {
                    window.location = $(this).data("href");
                });
        });
    </script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        var steamId = '@Model.Player.SteamId';
        var rating = '@Model.Player.Rating';
        $.ajax({
            url: '/api/legiontd',
            type: 'get',
            data: {method : 'match_history', steamId : steamId},
            success: function(data) {
                var dates = data.map(d => new Date(Date.parse(d.data.date)));
                dates = [... new Set(dates.map(d => new Date(d.getFullYear(), d.getMonth(), d.getDate()).getTime()))];
                dates.sort()
                var ratings = [... new Array(dates.length)].map(x => 0);
                data.forEach(function(d)
                {
                    var date = new Date(Date.parse(d.data.date));
                    date = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();
                    var ind = dates.indexOf(date);
                    ratings[ind] += d.data.ratingChange;
                });
                var realRatings = new Array(ratings.length);
                for (var i=ratings.length - 1; i>=0; i--) {
                    var change = 0;
                    for (var j=i; j<ratings.length; j++) {
                        change += ratings[j];
                    }
                    realRatings[i] = rating - change;
                }
                dates = dates.map(d => new Date(d))
                var trace = {
                    x : dates,
                    y : realRatings,
                    type : 'lines',
                    displayModeBar : false
                };
                var layout = {
                    title: 'Rating',
                    showlegend: false,
                    margin: {
                        l: 32,
                        r: 0,
                        b: 32,
                        t: 50
                    }
                };
                Plotly.newPlot('player_rating_plot', [trace], layout, {displayModeBar : false});
            }
        });
    </script>
}
