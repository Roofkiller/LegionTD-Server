@page "{builder}"
@using LegionTDServerReborn.Models
@using LegionTDServerReborn.Extensions
@using LegionTDServerReborn.Helpers
@using Microsoft.AspNetCore.Html
@model BuilderModel
@{
    ViewData["Title"] = @Model.Builder.ToBuilderName();
}

<div class='row'>
    <div class='row match-header '>
        <div class='col-lg-5 col-md-4 match-title'>
            <span class='match-title'><img class='builder-icon-big' src='~/images/builder/@(Model.BuilderName + ".png")'> @ViewData["Title"]</span>
        </div>
        <div class='col-lg-7 col-md-8 col-sm-12 col-xs-12' style="">
            <div id='match_info' style="">
                    @{
                        var dictionary = new Dictionary<string, string>();
                        if (Model.Builder != null) {
                            dictionary["Pick Rate"] = $"{Model.Builder.CurrentStatistic.PickRate*100:00.00}%";
                            dictionary["Games Today"] = $"<span class='radiant'>{@Model.Builder.CurrentStatistic.WonGames}</span> - <span class='dire'>{@Model.Builder.CurrentStatistic.LostGames}</span>";
                            dictionary["Win Rate"] = $"{Model.Builder.CurrentStatistic.WinRate*100:00.00}%";
                        }
                        <div class='row'>
                            @foreach (var pair in dictionary) {
                                <div class='col-md-3 col-sm-3 col-xs-6 match-info'>
                                    <p class='match-info-title text-center'>@pair.Key</p>
                                    <p class='match-info-value text-center'>@Html.Raw(pair.Value)</p>
                                </div>
                            }
                        </div>
                    }
            </div>
        </div>
    </div>
</div>

<div class="row builder-stats">
    <div class="col-md-6 col-sm-12 col-xs-12">
        <div id='win_rate_plot' class="builder-plot"></div>
    </div>
    <div class="col-md-6 col-sm-12 col-xs-12">
        <div id='pick_rate_plot' class="builder-plot"></div>
    </div>
</div>

<h3>Units</h3>
<div class='table-responsive'>
    <table class='table table-striped table-hover'>
        <thead>
            <tr>
                <th class='text-left'>
                    Unit
                </th>
                <th class='text-right'>
                    Builds/Game
                </th>
                <th class='text-right'>
                    Win Rate
                </th>
                <th class='text-right'>
                    Gold Cost
                </th>
                <th class='text-right'>
                    Total Cost
                </th>
                <th class='text-right'>
                    Health
                </th>
                <th class='text-right'>
                    Armor
                </th>
                <th class='text-right'>
                    Damage
                </th>
                <th class='text-right'>
                    Attack Rate
                </th>
                <th class='text-right'>
                    DPS
                </th>
                <th class='text-right'>
                    Range
                </th>
            </tr>
        </thead>
        <tbody>
            @{
                Func<Unit, IHtmlContent> printUnit = 
                    @<tr class='text-right'>
                    <td class='text-left'>
                        @{
                            var unit = item;
                            var stats = Model.Statistics[unit.Name];
                            var indent = unit.GetLevel();
                        }
                        <span style='padding-left: @(indent - 1 + "em")'>@unit.DisplayName</span>
                    </td>
                    <td>
                        @stats.BuildsPerGame.ToString("F")
                    </td>
                    <td>
                        @($"{stats.WinRate*100:00.0}%")
                    </td>
                    <td>
                        @unit.GetGoldCost()
                    </td>
                    <td>
                        @unit.GetTotalGoldCost()
                    </td>
                    <td>
                        @unit.StatusHealth
                    </td>
                    <td>
                        @unit.ArmorPhysical
                    </td>
                    <td>
                        @((int)((unit.AttackDamageMin + unit.AttackDamageMax)/2))
                    </td>
                    <td>
                        @unit.AttackRate.ToString("0.00")
                    </td>
                    <td>
                        @if (unit.AttackRate == 0) {
                            <span>0</span>
                        } else {
                            @((int)((unit.AttackDamageMin + unit.AttackDamageMax)/2 / unit.AttackRate))
                        }
                    </td>
                    <td>
                        @unit.AttackRange
                    </td>
                </tr>;
                
                var toPrint = new Stack<Unit>();
                foreach(var unit in Model.Units.Where(u => u.GetParent() == null).OrderBy(u => u.GetGoldCost())) {
                    toPrint.Push(unit);
                    while (toPrint.Count > 0) {
                        var current = toPrint.Pop();
                        if (current.GetLevel() > 0) {
                            @printUnit(current)
                        }
                        foreach(var toAdd in current.GetChildren()) {
                            toPrint.Push(toAdd);
                        }
                    }
                }
            }
        </tbody>
    </table>
</div>


@section scripts {
    <script>
        $(function () {
            $(".clickable-row").click(function() {
                    window.location = $(this).data("href");
                });
        });
    </script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        var fraction = '@Model.Builder.Name';
        $.ajax({
            url: '/api/legiontd',
            type: 'get',
            data: {method : 'fraction_data_history', numDays : 92, fraction : fraction},
            success: function(data) {
                var dates = data.map(d => new Date(Date.parse(d.timeStamp)));
                dates = dates.map(d => new Date(d.getFullYear(), d.getMonth(), d.getDate()));
                var winRates = data.map(d => d.winRate != "NaN" ? d.winRate : 0);
                var winRateTrace = {
                    x : dates,
                    y : winRates,
                    type : 'lines',
                    displayModeBar : false
                };
                var layout = {
                    title: 'Win Rate',
                    showlegend: false,
                    yaxis : {
                        range : [0, 1]
                    },
                    margin: {
                        l: 32,
                        r: 0,
                        b: 32,
                        t: 50
                    }
                };
                Plotly.newPlot('win_rate_plot', [winRateTrace], layout, {displayModeBar : false});
                var pickRates = data.map(d => d.pickRate)
                var maxPR = Math.ceil(Math.max(...pickRates))
                var pickRateTrace = {
                    x : dates,
                    y : pickRates,
                    type : 'lines',
                    displayModeBar : false,
                    line: {
                        color: 'rgb(191, 120, 48)'
                    }
                };
                var layout = {
                    title: 'Pick Rate',
                    showlegend: false,
                    yaxis : {
                        range : [0, maxPR]
                    },
                    margin: {
                        l: 32,
                        r: 0,
                        b: 32,
                        t: 50
                    }
                };
                Plotly.newPlot('pick_rate_plot', [pickRateTrace], layout, {displayModeBar : false});
            }
        });
    </script>
}
